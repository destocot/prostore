generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  productId String   @id @default(dbgenerated("gen_random_uuid()")) @map("product_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  name        String
  slug        String   @unique(map: "product_slug_idx")
  category    String
  images      String[]
  brand       String
  description String
  stock       Int
  price       Decimal  @default(0) @db.Decimal(12, 2)
  rating      Decimal  @default(0) @db.Decimal(3, 2)
  numReviews  Int      @default(0) @map("num_reviews")
  isFeatured  Boolean  @default(false) @map("is_featured")
  banner      String?

  @@map("products")
}

enum UserRole {
  USER
  ADMIN
}

enum UserPaymentMethod {
  CASH
  STRIPE
  PAYPAL
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  name          String  @default("NO_NAME")
  email         String  @unique(map: "user_email_idx")
  emailVerified Boolean @map("email_verified")
  image         String?

  role          UserRole           @default(USER)
  address       Json?              @db.Json
  paymentMethod UserPaymentMethod? @map("payment_method")

  sessions Session[]
  accounts Account[]

  @@map("users")
}

model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  expiresAt DateTime @map("expires_at") @db.Timestamp(6)
  token     String   @unique(map: "session_token_idx")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id") @db.Uuid

  @@map("sessions")
}

model Account {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  accountId             String    @map("account_id")
  providerId            String    @map("provider_id")
  accessToken           String?   @map("access_token")
  refreshToken          String?   @map("refresh_token")
  idToken               String?   @map("id_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at") @db.Timestamp(6)
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at") @db.Timestamp(6)
  scope                 String?
  password              String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id") @db.Uuid

  @@map("accounts")
}

model Verification {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @updatedAt @db.Timestamp(6)

  identifier String
  value      String
  expiresAt  DateTime @map("expires_at") @db.Timestamp(6)

  @@map("verifications")
}
